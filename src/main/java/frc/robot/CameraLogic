
package frc.robot;

import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.networktables.NetworkTableInstance;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import frc.robot.autonomousCommands.PositionThread;

//TODO : add autoalign functionality
public final class CameraLogic {
    static NetworkTable camera = NetworkTableInstance.getDefault().getTable("limelight");
    static double[][] rotateVector = {
        {1,0,0},
        {0, Math.sqrt(3)/2, 1/2},
        {0, -1/2, Math.sqrt(3)/2},
    };

    static double[] updatedTargetPos = new double[6];
/**
 * red tags:1-11
 * 1-2 coral station
 * 3 processor
 * 4-5 barge
 * 6-11 reef tags
 * 
 * blue tags:12-22
 * 12-13 "coral station" - pick up coral here from human player
 * 14-15 "barge" - hang place
 * 16 "processor" - put ball here
 * 17-22 "reef" - center thingy with things on it
 */
    public static final int[] tagIds = {
        7,
        4,
        11,
        13,
        14,
        15,
        16,
    };

    public static final int[] tagIdsNEW = {
        6, 
        7,
        8, 
        9, 
        10, 
        11, 
        17, 
        18, 
        19, 
        20, 
        21, 
        22
    };

    public static double[][] idTarget = {
        //Distance from Speaker Tag
        {0, 1.9, 0},
        //distance from hang
        {-.2, -.6, 0},
    };

    public static double[][] idTargetNEW = {
        //Distance from reef tag left
        {-15, 6, 0},
        //distance from reef tag right
        {15, 6, 0},
    };

    

 

    public static void autoAlign(boolean alignToLeft){
        NetworkTableEntry id = camera.getEntry("tid");
        updateValues();
        if (updatedTargetPos[0] == 0.0) {
            return;
        }
        double[] targetPose = new double[3];
        int iid = (int) id.getDouble(0);
        if (iid == 0) {
            return;
        }

        for(int i = 0; i <= idTargetNEW.length; i++)
        {
            if (iid == idTargetNEW[i]) {
                alignToReef(alignToLeft);
            } 
        }
    }
    
    public static void alignToReef(boolean alignToLeft){
        if(alignToLeft)
        {
            //make the x be left of the april tag
        targetPose[0] = (updatedTargetPos[0] - idTarget[0][0]) * 100;
        }
        else
        {
            //make the x be right of the april tag
            targetPose[0] = (updatedTargetPos[0] - idTarget[0][0]) * 100;
        }
            targetPose[1] = (updatedTargetPos[2] - idTarget[0][1]) * 100;
            targetPose[2] = updatedTargetPos[4] * Math.PI/180;
            moveTo(targetPose);
    }


    public static void updateValues(){
        NetworkTableEntry pose = camera.getEntry("targetpose_robotspace");
        updatedTargetPos = pose.getDoubleArray(new double[6]);
    }

    public static double[] postXYZ() {
        updateValues();
        double[] postXYZ = new double[3];
        postXYZ[0] = (updatedTargetPos[0] - idTarget[0][0]) * 100;
        postXYZ[1] = (updatedTargetPos[2] - idTarget[0][1]) * 100;
        postXYZ[2] = updatedTargetPos[4] * Math.PI/180;

        SmartDashboard.putNumber("ID", camera.getEntry("tid").getDouble(0));
        return postXYZ;
    } 

    // make a method that takes a double[] and moves the robot to that position
    public static void moveTo(double[] targetPose) {
        Thread run = new Thread(new PositionThread(targetPose[0], targetPose[1], targetPose[2]));
        run.start();
    }

    public static int getID() {
        return (int) camera.getEntry("tid").getDouble(0);
    }

    public static boolean isIdTarget() {
        int id = getID();
        for (int i = 0; i < idTarget.length; i++) {
            if (id == tagIds[i]) {
                return true;
            }
        }
        return false;
    }

    
}
